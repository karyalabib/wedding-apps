/**
 * Flexbox
 * DRY approach for flex-related stuff
 * 
 * Usage
 * 
 * @include flex();
 * @include flex(column);
 * @include flex(column, flex-start, center, true);
 */

 @mixin flex($direction: row, $align: center, $justify: center, $wrap: false, $important: false)
 {
     @if $important
     {
         display: flex !important;
         flex-direction: #{$direction} !important;
         align-items: #{$align} !important;
         justify-content: #{$justify} !important;
 
         @if $wrap 
         {
           flex-wrap: wrap !important;
         }
         @else
         {
           flex-wrap: nowrap !important;
         }
     }
     @else
     {
         display: flex;
         flex-direction: #{$direction};
         align-items: #{$align};
         justify-content: #{$justify};
 
         @if $wrap 
         {
           flex-wrap: wrap;
         }
         @else
         {
           flex-wrap: nowrap;
         }
     }
 }

 /**
 * Fixed Size
 * Make an element size become fixed in oneliner
 * 
 * Usage
 * 
 * @include fixedSize(100%);
 * @include fixedSize(48px);
 * @include fixedSize(calc(100% - 30px));
 * @include fixedSize(4rem);
 * 
 * Too lazy to write docs, those above also apply to fixedWidth() and fixedHeight()
 */

@mixin fixedWidth($size, $important: false)
{
    @if $important == true
    {
        min-width: #{$size} !important;
        max-width: #{$size} !important;
        width: #{$size} !important;
    }
    @else 
    {
        min-width: #{$size};
        max-width: #{$size};
        width: #{$size};
    }
}

@mixin fixedHeight($size, $important: false)
{
    @if $important == true
    {
        min-height: #{$size} !important;
        max-height: #{$size} !important;
        height: #{$size} !important;
    }
    @else 
    {
        min-height: #{$size};
        max-height: #{$size};
        height: #{$size}; 
    }
}

@mixin fixedSize($size, $important: false)
{
    @include fixedWidth($size, $important);
    @include fixedHeight($size, $important);
}

/**
 * Rem units
 * Implementing CSS rem units with pixel fallback
 * 
 * Usage
 * 
 *  body
 *  {
 *      @include font-size(16);
 *      @include line-height(28);
 *  }
 */

 @mixin fontSize($size, $base: 16)
 {
     font-size: $size + 0px; // fallback for old browsers
     font-size: calc(($size / $base) * 1rem);
 }
 
 @mixin lineHeight($size, $base: 16)
 {
     line-height: $size + 0px; // fallback for old browsers
 }
 


/**
 * Position
 */

@mixin position($position: relative, $top: auto, $right: auto, $bottom: auto, $left: auto, $base: 16)
{
    position: #{$position};

    @if $top {
        @if $top == auto {
            top: $top;
        } @else if is-percentage($top) {
            top: $top;
        } @else {
            @if $top == 0 {
                top: 0;
            } @else {
                top: $top;
            }
        }
    }

    @if $left {
        @if $left == auto {
            left: $left;
        } @else if is-percentage($top) {
            left: $left;
        } @else {
            @if $left == 0 {
                left: 0;
            } @else {
                left: $left;
            }
        }
    }

    @if $bottom {
        @if $bottom == auto {
            bottom: $bottom;
        } @else if is-percentage($top) {
            bottom: $bottom;
        } @else {
            @if $bottom == 0 {
                bottom: 0;
            } @else {
                bottom: $bottom
            }
        }
    }

    @if $right {
        @if $right == auto {
            right: $right;
        } @else if is-percentage($top) {
            right: $right;
        } @else {
            @if $right == 0 {
                right: 0;
            } @else {
                right: $right;
            }
        }
    }
}

@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto, $base: 16)
{
    @include position(absolute, $top, $right, $bottom, $left, $base);
}

@mixin fixed($top: auto, $right: auto, $bottom: auto, $left: auto, $base: 16)
{
    @include position(fixed, $top, $right, $bottom, $left, $base);
}